{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfd7\ufe0f DexaMinds Engineering Handbook","text":"<p>Welcome to the DexaMinds Engineering Handbook! This repository serves as the central hub for our engineering standards, best practices, and team guidelines. It's designed to help our team maintain consistency, quality, and efficiency across all our engineering efforts.</p>"},{"location":"#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ol> <li>Coding Standards - Language-specific coding guidelines and best practices</li> <li>Development Practices - Our approach to software development and delivery</li> <li>Team Culture - Our engineering values and collaboration guidelines</li> <li>Career Growth - Resources and frameworks for professional development</li> </ol>"},{"location":"#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This handbook is a living document that evolves with our team and technology stack. It's intended to:</p> <ul> <li>Provide clear guidelines for maintaining code quality</li> <li>Document our engineering processes and best practices</li> <li>Help onboard new team members efficiently</li> <li>Serve as a reference for technical decision-making</li> </ul>"},{"location":"#how-to-use-this-handbook","title":"\ud83d\udee0 How to Use This Handbook","text":"<ol> <li>For New Team Members: Start with the Onboarding Guide</li> <li>Contributing: See CONTRIBUTING.md for how to suggest changes</li> <li>Questions? Reach out to the engineering leadership team</li> </ol>"},{"location":"#keeping-this-handbook-updated","title":"\ud83d\udd04 Keeping This Handbook Updated","text":"<p>We encourage all team members to contribute to this handbook. If you find something that's outdated or missing, please submit a pull request or create an issue.</p>"},{"location":"career-growth/leveling-framework/","title":"Leveling Framework","text":"<p>At DexaMinds, we recognize that growth isn\u2019t linear \u2014 it\u2019s multidimensional. Our engineering leveling framework provides a clear, flexible path for personal development, technical mastery, and leadership. This framework is not just about promotions; it's a tool for self-reflection, career conversations, and intentional growth.</p>"},{"location":"career-growth/leveling-framework/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Define expectations at each level of engineering contribution.</li> <li>Foster transparency, consistency, and fairness in evaluations.</li> <li>Encourage ownership of one\u2019s growth journey through structured guidance.</li> </ul>"},{"location":"career-growth/leveling-framework/#career-tracks","title":"\ud83e\udded Career Tracks","text":"<p>We offer two equally respected tracks:</p> <ul> <li>Individual Contributor (IC) \u2014 Deep technical expertise, ownership of systems, thought leadership.</li> <li>Engineering Manager (EM) \u2014 People leadership, team orchestration, delivery accountability.</li> </ul> <p>Transitions between tracks are supported and celebrated.</p>"},{"location":"career-growth/leveling-framework/#ic-levels","title":"\ud83d\udcf6 IC Levels","text":"Level Title Focus L1 Software Engineer I Learning, onboarding, executing well-defined tasks L2 Software Engineer II Independent contributor, reliable execution L3 Senior Engineer End-to-end ownership, mentorship, architectural input L4 Staff Engineer Technical strategy, system design, cross-team impact L5 Principal Engineer Org-wide influence, visionary innovation, thought leadership"},{"location":"career-growth/leveling-framework/#core-competencies-ic-track","title":"\ud83e\uddf1 Core Competencies (IC Track)","text":"<ul> <li>Technical Mastery: Proficiency in core technologies and system design.</li> <li>Execution: Ability to deliver features with quality, speed, and care.</li> <li>Collaboration: Empathetic communication and cross-functional partnership.</li> <li>Impact: Measurable contributions to product, platform, or team velocity.</li> <li>Growth Mindset: Seeks feedback, self-improves, and supports others' growth.</li> </ul>"},{"location":"career-growth/leveling-framework/#em-levels","title":"\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 EM Levels","text":"Level Title Focus L3M Engineering Manager Team management, delivery leadership L4M Senior Engineering Manager Multi-team leadership, cross-functional strategy L5M Director of Engineering Org leadership, vision alignment, scaling teams"},{"location":"career-growth/leveling-framework/#core-competencies-em-track","title":"\ud83d\udcc2 Core Competencies (EM Track)","text":"<ul> <li>People Development: Coaching, mentoring, performance support.</li> <li>Team Execution: Roadmap planning, delivery velocity, risk mitigation.</li> <li>Culture Stewardship: Psychological safety, inclusion, team morale.</li> <li>Technical Guidance: Systems thinking, architectural review, code quality.</li> <li>Business Alignment: Translating product strategy into engineering outcomes.</li> </ul>"},{"location":"career-growth/leveling-framework/#growth-evaluations","title":"\ud83d\udcca Growth Evaluations","text":"<ul> <li>Self-Assessment: Conducted every 6 months using the leveling rubric.</li> <li>Manager Feedback: Regular 1:1s and performance reviews.</li> <li>360 Feedback: Peer input and cross-functional insights.</li> <li>Promotion Panels: Transparent, committee-based decisions using evidence and artifacts.</li> </ul>"},{"location":"career-growth/leveling-framework/#continuous-growth-model","title":"\ud83d\udd01 Continuous Growth Model","text":"<ul> <li>Growth is ongoing \u2014 not reserved for review cycles.</li> <li>Promotion is recognition of consistent, sustained performance.</li> <li>Movement within or across tracks is encouraged and supported.</li> </ul>"},{"location":"career-growth/leveling-framework/#our-philosophy","title":"\ud83e\udeb4 Our Philosophy","text":"<p>At DexaMinds, your career isn\u2019t a ladder \u2014 it\u2019s a garden. You choose what to grow, how to grow, and who to grow with.</p> <p>We\u2019re here to provide the soil, water, and sunlight. You bring the curiosity, courage, and craft.</p>"},{"location":"career-growth/mentorship/","title":"Mentorship","text":"<p>Mentorship is a cornerstone of the DexaMinds engineering culture. We believe that greatness is not achieved in isolation \u2014 it is cultivated through shared wisdom, trusted guidance, and meaningful human connections.</p> <p>Our mentorship program is designed to empower every engineer to thrive \u2014 whether you\u2019re just starting out or preparing to lead large systems or teams.</p>"},{"location":"career-growth/mentorship/#objectives","title":"\ud83c\udfaf Objectives","text":"<ul> <li>Accelerate growth through guidance, not gatekeeping.</li> <li>Build trusted relationships that foster psychological safety.</li> <li>Promote a culture of giving back and lifting others as we rise.</li> <li>Support both technical and non-technical aspects of career growth.</li> </ul>"},{"location":"career-growth/mentorship/#mentorship-models","title":"\ud83d\udc65 Mentorship Models","text":"<p>We support different types of mentorship based on context and goals:</p>"},{"location":"career-growth/mentorship/#1-onboarding-mentorship","title":"1. Onboarding Mentorship","text":"<ul> <li>Assigned to every new engineer.</li> <li>Helps navigate tools, systems, and culture during the first 90 days.</li> </ul>"},{"location":"career-growth/mentorship/#2-technical-mentorship","title":"2. Technical Mentorship","text":"<ul> <li>Deep dive into specific domains (e.g., DevOps, Frontend, ML).</li> <li>Often led by senior engineers or domain experts.</li> </ul>"},{"location":"career-growth/mentorship/#3-career-mentorship","title":"3. Career Mentorship","text":"<ul> <li>Focused on long-term growth, goal setting, and leveling up.</li> <li>Conversations often include feedback, confidence building, and leadership.</li> </ul>"},{"location":"career-growth/mentorship/#4-peer-mentorship","title":"4. Peer Mentorship","text":"<ul> <li>Informal, lateral support from colleagues.</li> <li>Encourages vulnerability, problem-solving, and shared learning.</li> </ul>"},{"location":"career-growth/mentorship/#how-it-works","title":"\ud83d\udd04 How It Works","text":"<ul> <li>Kickoff: New engineers are paired with a mentor within the first week.</li> <li>Cadence: Regular check-ins (weekly or bi-weekly) encouraged.</li> <li>Tooling: Notion templates and prompts to guide conversations.</li> <li>Tracking: Outcomes and growth plans are logged collaboratively.</li> </ul>"},{"location":"career-growth/mentorship/#tips-for-mentees","title":"\ud83d\udca1 Tips for Mentees","text":"<ul> <li>Be proactive \u2014 mentorship is a two-way street.</li> <li>Ask questions, share goals, and own your journey.</li> <li>Respect your mentor\u2019s time and come prepared.</li> </ul>"},{"location":"career-growth/mentorship/#tips-for-mentors","title":"\ud83c\udf31 Tips for Mentors","text":"<ul> <li>Listen more than you speak.</li> <li>Share both successes and failures.</li> <li>Adapt your style to the mentee\u2019s needs.</li> <li>Celebrate growth \u2014 big or small.</li> </ul>"},{"location":"career-growth/mentorship/#culture-of-mentorship","title":"\u2728 Culture of Mentorship","text":"<p>At DexaMinds, mentorship is not a title or a program \u2014 it's a mindset. We believe:</p> <ul> <li>Everyone has something to teach, and everyone has something to learn.</li> <li>Mentorship should be reciprocal, empowering, and joyful.</li> <li>The impact of a good mentor extends far beyond technical skill \u2014 it shapes careers, confidence, and culture.</li> </ul> <p>\"True leadership is planting seeds in a garden you may never see bloom.\"</p> <p>Let's continue planting boldly.</p>"},{"location":"coding-standards/javascript/","title":"JavaScript","text":""},{"location":"coding-standards/javascript/#javascript-coding-standards-dexaminds","title":"\ud83d\udcbb JavaScript Coding Standards (DexaMinds)","text":""},{"location":"coding-standards/javascript/#1-general-guidelines","title":"1. General Guidelines","text":"<ul> <li>Follow the Airbnb Style Guide</li> <li>Use <code>const</code> and <code>let</code> (avoid <code>var</code>)</li> <li>Prefer modern ES6+ features</li> </ul>"},{"location":"coding-standards/javascript/#2-file-and-variable-naming","title":"2. File and Variable Naming","text":"<ul> <li>Use <code>camelCase</code> for variables/functions</li> <li>Use <code>PascalCase</code> for components/classes</li> <li>File names: <code>kebab-case.js</code> (e.g., <code>user-profile.js</code>)</li> </ul>"},{"location":"coding-standards/javascript/#3-formatting","title":"3. Formatting","text":"<ul> <li>2-space indentation</li> <li>Always use semicolons</li> <li>Prefer single quotes</li> <li>Use trailing commas in multi-line objects/arrays</li> </ul> <pre><code>const user = {\n  name: 'Alice',\n  age: 30,\n};\n</code></pre>"},{"location":"coding-standards/javascript/#4-functions","title":"4. Functions","text":"<ul> <li>Use arrow functions for anonymous and short functions</li> </ul> <pre><code>const greet = name =&gt; `Hello, ${name}`;\n</code></pre> <ul> <li>Avoid deeply nested callbacks (prefer async/await or Promises)</li> </ul>"},{"location":"coding-standards/javascript/#5-comments-documentation","title":"5. Comments &amp; Documentation","text":"<ul> <li>Use <code>//</code> for single-line, <code>/** */</code> for multi-line</li> <li>Use JSDoc for public functions</li> </ul> <pre><code>/**\n * Calculate sum of two numbers.\n * @param {number} a - First number\n * @param {number} b - Second number\n * @returns {number}\n */\nfunction add(a, b) {\n  return a + b;\n}\n</code></pre>"},{"location":"coding-standards/javascript/#6-objects-arrays","title":"6. Objects &amp; Arrays","text":"<ul> <li>Use destructuring where appropriate</li> </ul> <pre><code>const { name, age } = user;\n</code></pre> <ul> <li>Avoid mutation \u2014 prefer immutable updates</li> </ul>"},{"location":"coding-standards/javascript/#7-error-handling","title":"7. Error Handling","text":"<ul> <li>Store constants and helper functions in their own files</li> </ul>"},{"location":"coding-standards/javascript/#8-state-management","title":"8. State Management","text":"<ul> <li>Use state management libraries (Redux, Context API) for global state</li> <li>Keep state as local as possible, lift state up when needed</li> </ul>"},{"location":"coding-standards/javascript/#9-performance-optimization","title":"9. Performance Optimization","text":"<ul> <li>Use <code>useMemo</code> and <code>useCallback</code> for expensive calculations and callbacks</li> <li>Implement code splitting for large applications</li> <li>Use <code>React.memo</code> for preventing unnecessary re-renders</li> </ul>"},{"location":"coding-standards/javascript/#10-security-practices","title":"10. Security Practices","text":"<ul> <li>Sanitize all user inputs</li> <li>Use environment variables for sensitive data</li> <li>Implement proper CORS policies</li> <li>Use Content Security Policy (CSP) headers</li> </ul>"},{"location":"coding-standards/javascript/#11-testing","title":"11. Testing","text":"<ul> <li>Write unit tests with Jest</li> <li>Aim for 80%+ test coverage</li> <li>Test user interactions with React Testing Library</li> </ul>"},{"location":"coding-standards/javascript/#12-error-boundaries","title":"12. Error Boundaries","text":"<ul> <li>Implement error boundaries to catch JavaScript errors</li> <li>Provide fallback UIs for better user experience</li> </ul>"},{"location":"coding-standards/javascript/#13-accessibility-a11y","title":"13. Accessibility (a11y)","text":"<ul> <li>Use semantic HTML elements</li> <li>Add proper ARIA attributes</li> <li>Ensure keyboard navigation works</li> <li>Test with screen readers</li> </ul>"},{"location":"coding-standards/javascript/#14-code-organization","title":"14. Code Organization","text":"<ul> <li>Follow the \"Feature First\" folder structure</li> <li>Keep related files together (component + styles + tests)</li> <li>Separate business logic from UI components</li> </ul>"},{"location":"coding-standards/javascript/#15-performance-monitoring","title":"15. Performance Monitoring","text":"<ul> <li>Implement error tracking (Sentry, LogRocket)</li> <li>Monitor Core Web Vitals</li> <li>Use React DevTools Profiler</li> </ul>"},{"location":"coding-standards/javascript/#16-internationalization-i18n","title":"16. Internationalization (i18n)","text":"<ul> <li>Externalize all UI strings</li> <li>Use libraries like react-i18next</li> <li>Consider RTL (Right-to-Left) layouts</li> </ul>"},{"location":"coding-standards/javascript/#17-code-reviews","title":"17. Code Reviews","text":"<ul> <li>Keep PRs small and focused</li> <li>Include screenshots for UI changes</li> <li>Address all review comments before merging</li> <li>Use meaningful commit messages</li> </ul>"},{"location":"coding-standards/python/","title":"Python","text":""},{"location":"coding-standards/python/#python-coding-standards-dexaminds","title":"\ud83d\udc0d Python Coding Standards (DexaMinds)","text":""},{"location":"coding-standards/python/#1-general-guidelines","title":"1. General Guidelines","text":"<ul> <li>Follow PEP 8</li> <li>Max line length: 79 characters</li> <li>Prefer clarity over cleverness</li> <li>Avoid magic numbers, use named constants</li> </ul>"},{"location":"coding-standards/python/#2-file-naming","title":"2. File Naming","text":"<ul> <li>Use <code>snake_case</code> for Python file names, e.g., <code>data_loader.py</code></li> <li>Avoid dashes or capital letters in filenames</li> </ul>"},{"location":"coding-standards/python/#3-indentation-and-spacing","title":"3. Indentation and Spacing","text":"<ul> <li>Use 4 spaces for indentation (no tabs)</li> <li>Add blank lines between top-level functions and classes</li> </ul>"},{"location":"coding-standards/python/#4-imports","title":"4. Imports","text":"<ul> <li>Standard library imports first, then third-party, then project-specific</li> <li>Use absolute imports when possible</li> </ul> <pre><code># Good\nimport os\nimport pandas as pd\nfrom myproject.utils import helper\n</code></pre>"},{"location":"coding-standards/python/#5-docstrings","title":"5. Docstrings","text":"<ul> <li>Use triple double-quoted strings <code>\"\"\"</code> per PEP 257</li> </ul> <pre><code>def fetch_data(source: str) -&gt; dict:\n    \"\"\"\n    Fetch data from a specified source.\n\n    Args:\n        source (str): The data source path.\n\n    Returns:\n        dict: Parsed data from the source.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"coding-standards/python/#6-naming-conventions","title":"6. Naming Conventions","text":"<ul> <li><code>snake_case</code> for variables/functions</li> <li><code>UPPER_CASE</code> for constants</li> <li><code>PascalCase</code> for class names</li> </ul>"},{"location":"coding-standards/python/#7-functions","title":"7. Functions","text":"<ul> <li>Keep them short and focused</li> <li>Prefer keyword arguments for clarity</li> <li>Include type hints</li> </ul>"},{"location":"coding-standards/python/#8-classes","title":"8. Classes","text":"<ul> <li>Single responsibility per class</li> <li>Group related methods</li> <li>Use <code>__init__</code> constructor wisely</li> </ul>"},{"location":"coding-standards/python/#9-error-handling","title":"9. Error Handling","text":"<ul> <li>Use <code>try...except</code> blocks for error handling</li> <li>Dependency management: <code>pip-tools</code> or <code>poetry</code></li> </ul>"},{"location":"coding-standards/python/#10-type-hinting","title":"10. Type Hinting","text":"<ul> <li>Use type hints for all function parameters and return values</li> <li>Leverage <code>typing</code> module for complex types</li> <li>Add <code># type: ignore</code> only when absolutely necessary</li> </ul>"},{"location":"coding-standards/python/#11-virtual-environments","title":"11. Virtual Environments","text":"<ul> <li>Always use virtual environments for project dependencies</li> <li>Document all dependencies in <code>requirements.txt</code> or <code>pyproject.toml</code></li> <li>Pin dependency versions for production</li> </ul>"},{"location":"coding-standards/python/#12-logging","title":"12. Logging","text":"<ul> <li>Use the <code>logging</code> module instead of print statements</li> <li>Configure appropriate log levels (DEBUG, INFO, WARNING, ERROR)</li> <li>Include contextual information in log messages</li> </ul>"},{"location":"coding-standards/python/#13-testing","title":"13. Testing","text":"<ul> <li>Write unit tests using <code>pytest</code></li> <li>Follow the Arrange-Act-Assert pattern</li> <li>Aim for 80%+ test coverage</li> <li>Use fixtures for test dependencies</li> </ul>"},{"location":"coding-standards/python/#14-performance","title":"14. Performance","text":"<ul> <li>Use list/dict comprehensions for simple loops</li> <li>Leverage generators for large datasets</li> <li>Profile code before optimizing (<code>cProfile</code>, <code>line_profiler</code>)</li> </ul>"},{"location":"coding-standards/python/#15-security","title":"15. Security","text":"<ul> <li>Use <code>secrets</code> module for cryptographic operations</li> <li>Sanitize all user inputs</li> <li>Avoid <code>eval()</code> and <code>exec()</code> with user input</li> <li>Use parameterized queries for database operations</li> </ul>"},{"location":"coding-standards/python/#16-documentation","title":"16. Documentation","text":"<ul> <li>Keep docstrings up-to-date with code changes</li> <li>Use Sphinx or MkDocs for project documentation</li> <li>Include examples in docstrings</li> </ul>"},{"location":"coding-standards/python/#17-code-quality","title":"17. Code Quality","text":"<ul> <li>Run linters (<code>pylint</code>, <code>flake8</code>) in CI/CD</li> <li>Use <code>black</code> for code formatting</li> <li>Run <code>mypy</code> for static type checking</li> </ul>"},{"location":"coding-standards/python/#18-concurrency","title":"18. Concurrency","text":"<ul> <li>Use <code>asyncio</code> for I/O-bound operations</li> <li>Prefer <code>concurrent.futures</code> for CPU-bound tasks</li> <li>Understand GIL limitations</li> </ul>"},{"location":"coding-standards/python/#19-error-handling","title":"19. Error Handling","text":"<ul> <li>Create custom exception classes for domain-specific errors</li> <li>Use context managers (<code>with</code> statement) for resource management</li> <li>Include error recovery mechanisms where possible</li> </ul>"},{"location":"coding-standards/python/#20-code-reviews","title":"20. Code Reviews","text":"<ul> <li>Keep PRs focused and small</li> <li>Include type hints in all new code</li> <li>Document any non-obvious decisions</li> <li>Update documentation when changing behavior</li> </ul>"},{"location":"development-practices/git-workflow/","title":"Git Workflow","text":""},{"location":"development-practices/git-workflow/#dexaminds-git-github-training-guide-using-git-bash","title":"\ud83e\udde0 DexaMinds Git &amp; GitHub Training Guide (Using Git Bash)","text":""},{"location":"development-practices/git-workflow/#1-initial-setup","title":"\ud83d\udd27 1. Initial Setup","text":""},{"location":"development-practices/git-workflow/#install-git","title":"\u2705 Install Git","text":"<ul> <li>Download from: https://git-scm.com/downloads</li> </ul>"},{"location":"development-practices/git-workflow/#configure-git","title":"\u2705 Configure Git","text":"<pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@dexaminds.com\"\ngit config --global core.editor \"code --wait\"  # Optional: Set VS Code as default editor\n</code></pre>"},{"location":"development-practices/git-workflow/#verify-configuration","title":"\u2705 Verify Configuration","text":"<pre><code>git config --list\n</code></pre>"},{"location":"development-practices/git-workflow/#2-repository-management","title":"\ud83d\udcc1 2. Repository Management","text":""},{"location":"development-practices/git-workflow/#clone-a-repository","title":"\u2705 Clone a Repository","text":"<pre><code>git clone https://github.com/your-org/repo-name.git\n</code></pre>"},{"location":"development-practices/git-workflow/#create-a-new-repository-local","title":"\u2705 Create a New Repository (Local)","text":"<pre><code>mkdir my-project\ncd my-project\ngit init\n</code></pre>"},{"location":"development-practices/git-workflow/#link-to-remote-repository","title":"\u2705 Link to Remote Repository","text":"<pre><code>git remote add origin https://github.com/your-org/repo-name.git\ngit push -u origin main\n</code></pre>"},{"location":"development-practices/git-workflow/#delete-a-local-repository","title":"\u274c Delete a Local Repository","text":"<pre><code>rm -rf my-project\n</code></pre>"},{"location":"development-practices/git-workflow/#3-branching-operations","title":"\ud83c\udf3f 3. Branching Operations","text":""},{"location":"development-practices/git-workflow/#create-a-new-branch","title":"\u2705 Create a New Branch","text":"<pre><code>git checkout -b feature/branch-name\n</code></pre>"},{"location":"development-practices/git-workflow/#switch-between-branches","title":"\ud83d\udd01 Switch Between Branches","text":"<pre><code>git checkout main\n</code></pre>"},{"location":"development-practices/git-workflow/#merge-a-branch","title":"\ud83d\udd00 Merge a Branch","text":"<pre><code>git checkout main\ngit merge feature/branch-name\n</code></pre>"},{"location":"development-practices/git-workflow/#delete-a-branch","title":"\u274c Delete a Branch","text":"<pre><code>git branch -d feature/branch-name       # Safe delete\ngit branch -D feature/branch-name       # Force delete\n</code></pre>"},{"location":"development-practices/git-workflow/#4-commit-workflow","title":"\ud83d\udd01 4. Commit Workflow","text":"<p>This section outlines the standard Git commit workflow that every developer at DexaMinds should follow:</p>"},{"location":"development-practices/git-workflow/#step-by-step-commit-workflow","title":"\ud83e\udded Step-by-Step Commit Workflow","text":"<ol> <li> <p>Pull latest changes from the remote branch:    <code>bash    git pull origin branch-name</code></p> </li> <li> <p>Check status of your working directory:    <code>bash    git status</code></p> </li> <li> <p>Stage the changes you want to commit:    <code>bash    git add file-name         # Add specific file    git add .                 # Add all changes</code></p> </li> <li> <p>Review staged changes (optional but recommended):    <code>bash    git diff --cached</code></p> </li> <li> <p>Commit with a meaningful message:    <code>bash    git commit -m \"feat: add login validation for user form\"</code></p> </li> <li> <p>Push your changes to the remote branch:    <code>bash    git push origin branch-name</code></p> </li> <li> <p>Create a Pull Request on GitHub and request review.</p> </li> </ol>"},{"location":"development-practices/git-workflow/#5-working-with-pull-requests-prs","title":"\ud83d\udd0d 5. Working with Pull Requests (PRs)","text":""},{"location":"development-practices/git-workflow/#create-a-pr","title":"\u2705 Create a PR","text":"<ol> <li>Push your branch to GitHub.</li> <li>Go to GitHub \u2192 Open your repo \u2192 Click \"Compare &amp; pull request\".</li> <li>Add title, description, reviewers, and submit.</li> </ol>"},{"location":"development-practices/git-workflow/#review-a-pr","title":"\u2705 Review a PR","text":"<ul> <li>Use GitHub UI to comment, approve, or request changes.</li> </ul>"},{"location":"development-practices/git-workflow/#merge-a-pr","title":"\u2705 Merge a PR","text":"<ul> <li>After approval, click \"Merge pull request\" on GitHub.</li> </ul>"},{"location":"development-practices/git-workflow/#6-best-practices","title":"\ud83e\uddea 6. Best Practices","text":"<ul> <li>Use meaningful branch names: <code>feature/login-page</code>, <code>fix/api-error</code></li> <li>Commit often with clear messages.</li> <li>Always pull before pushing.</li> <li>Delete merged branches to keep repo clean.</li> <li>Use <code>.gitignore</code> to avoid committing unnecessary files.</li> </ul>"},{"location":"development-practices/git-workflow/#common-git-commands-cheat-sheet","title":"\ud83d\udee0\ufe0f Common Git Commands Cheat Sheet","text":"Action Command Initialize repo <code>git init</code> Clone repo <code>git clone &lt;url&gt;</code> Check status <code>git status</code> Stage file <code>git add file-name</code> Stage all <code>git add .</code> Unstage file <code>git reset file-name</code> Commit <code>git commit -m \"message\"</code> Amend last commit <code>git commit --amend</code> View commit history <code>git log</code> View one-line log <code>git log --oneline</code> Create branch <code>git checkout -b branch-name</code> Switch branch <code>git checkout branch-name</code> Delete branch <code>git branch -d branch-name</code> Merge branch <code>git merge branch-name</code> Pull changes <code>git pull origin branch-name</code> Push changes <code>git push origin branch-name</code> View remote <code>git remote -v</code> Add remote <code>git remote add origin &lt;url&gt;</code> Remove remote <code>git remote remove origin</code>"},{"location":"development-practices/testing-strategy/","title":"Testing Strategy","text":"<p>At DexaMinds, we don\u2019t just write code \u2014 we engineer confidence. Testing is not an afterthought or a checkbox; it is a core pillar of how we deliver scalable, secure, and resilient software. Our testing strategy is designed to support rapid iteration without compromising stability, allowing us to move fast and ship with pride.</p>"},{"location":"development-practices/testing-strategy/#objectives","title":"\ud83c\udfaf Objectives","text":"<ul> <li>Ensure functional correctness, security, and performance of our applications.</li> <li>Enable fast feedback cycles through automation and continuous integration.</li> <li>Promote a shared sense of ownership and accountability for product quality.</li> <li>Encourage a test-first mindset to drive better architecture and design.</li> </ul>"},{"location":"development-practices/testing-strategy/#testing-pyramid","title":"\ud83e\uddf1 Testing Pyramid","text":"<p>We adopt a testing pyramid model that balances depth and speed, favoring a strong foundation of fast, reliable tests.</p> <pre><code>UI (End-to-End) Tests\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nIntegration Tests\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUnit Tests\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre>"},{"location":"development-practices/testing-strategy/#1-unit-tests-foundation","title":"1. Unit Tests (Foundation)","text":"<ul> <li>Purpose: Test individual functions, components, or classes in isolation.</li> <li>Tools: Jest, Mocha, JUnit, PyTest (language-specific)</li> <li>Best Practices:</li> <li>Cover edge cases and logic branches.</li> <li>Keep tests small, focused, and independent.</li> <li>Mock external dependencies (APIs, databases).</li> </ul>"},{"location":"development-practices/testing-strategy/#2-integration-tests","title":"2. Integration Tests","text":"<ul> <li>Purpose: Test interactions between modules (e.g., service layers and databases).</li> <li>Tools: Supertest, Postman/Newman, SpringBootTest, Testcontainers</li> <li>Best Practices:</li> <li>Simulate real-world workflows.</li> <li>Avoid excessive mocks to preserve integration realism.</li> <li>Run regularly as part of CI.</li> </ul>"},{"location":"development-practices/testing-strategy/#3-end-to-end-e2e-tests","title":"3. End-to-End (E2E) Tests","text":"<ul> <li>Purpose: Validate entire user flows and system behavior from the end-user perspective.</li> <li>Tools: Cypress, Playwright, Selenium</li> <li>Best Practices:</li> <li>Test critical paths (e.g., login, checkout, data entry).</li> <li>Avoid flakiness by managing test data and dependencies.</li> <li>Run on staging environments post-deployment.</li> </ul>"},{"location":"development-practices/testing-strategy/#test-lifecycle-in-cicd","title":"\ud83d\udd01 Test Lifecycle in CI/CD","text":"<p>Testing is seamlessly integrated into our CI/CD pipelines to ensure continuous quality:</p> Stage Test Type Trigger Pre-commit Linting, Unit Tests Developer local Pre-push / CI Unit + Integration Tests GitHub Actions / CI pipeline Pre-deploy E2E Tests Staging pipeline Post-deploy Smoke Tests, Monitoring Production"},{"location":"development-practices/testing-strategy/#specialized-testing","title":"\ud83e\uddea Specialized Testing","text":""},{"location":"development-practices/testing-strategy/#security-testing","title":"\ud83d\udee1\ufe0f Security Testing","text":"<ul> <li>Automated tools: OWASP ZAP, Snyk, Dependency Scanners</li> <li>Manual reviews for auth flows, role-based access, and input validation</li> </ul>"},{"location":"development-practices/testing-strategy/#performance-load-testing","title":"\u26a1 Performance &amp; Load Testing","text":"<ul> <li>Tools: k6, JMeter, Locust</li> <li>Run against staging before release cycles or after architectural changes</li> </ul>"},{"location":"development-practices/testing-strategy/#contract-testing","title":"\ud83e\uddec Contract Testing","text":"<ul> <li>Tools: Pact, Dredd</li> <li>Validates API agreements between microservices or frontend-backend interfaces</li> </ul>"},{"location":"development-practices/testing-strategy/#chaos-resilience-testing-optional-but-encouraged","title":"\ud83e\uddef Chaos &amp; Resilience Testing (optional but encouraged)","text":"<ul> <li>Tools: Gremlin, ChaosMonkey</li> <li>Ensure services degrade gracefully under stress or failure conditions</li> </ul>"},{"location":"development-practices/testing-strategy/#culture-of-testing","title":"\u2728 Culture of Testing","text":"<p>Testing is not just a responsibility \u2014 it\u2019s a mindset:</p> <ul> <li>Write tests as you write code, not afterward.</li> <li>Prioritize readability \u2014 future you and your team will thank you.</li> <li>Fail fast, fix fast \u2014 treat failed tests as opportunities to strengthen the system.</li> <li>Celebrate test coverage, but never sacrifice quality for numbers.</li> </ul>"},{"location":"development-practices/testing-strategy/#test-coverage-goals","title":"\u2705 Test Coverage Goals","text":"Type Minimum Coverage Unit 80%+ Integration 60%+ E2E Critical flows only (measured by business impact) <p>Note: Quality &gt; Quantity. 100% coverage with brittle or redundant tests can be more harmful than 80% meaningful coverage.</p>"},{"location":"development-practices/testing-strategy/#conclusion","title":"\ud83e\udded Conclusion","text":"<p>Our testing strategy ensures that every line of code we ship is reliable, maintainable, and ready for scale. In a fast-moving environment like DexaMinds, tests are not blockers \u2014 they are enablers. When we test well, we innovate with confidence.</p> <p>Let\u2019s continue to build boldly \u2014 with quality engineered at every step.</p>"},{"location":"team-culture/code-of-conduct/","title":"Code of Conduct","text":"<p>At DexaMinds, we believe that great products emerge not only from brilliant ideas and skillful engineering but from a culture rooted in integrity, respect, and collaboration. Our Code of Conduct sets the standard for how we work, communicate, and grow together \u2014 as individuals and as a collective striving toward innovation with impact.</p>"},{"location":"team-culture/code-of-conduct/#our-commitment","title":"Our Commitment","text":"<p>We are committed to building an inclusive and inspiring workplace \u2014 one where creativity is celebrated, collaboration is second nature, and diversity of thought fuels our collective intelligence.</p> <ul> <li>We prioritize respect, transparency, and empathy in all interactions.</li> <li>We foster a culture where psychological safety and open dialogue enable everyone to speak up, take risks, and challenge the status quo.</li> <li>We hold ourselves accountable for ensuring a safe, equitable, and empowering environment for all team members, partners, and contributors.</li> </ul>"},{"location":"team-culture/code-of-conduct/#expected-standards-of-behavior","title":"Expected Standards of Behavior","text":"<p>DexaMinds employees, contractors, and community participants are expected to embody these standards at all times:</p>"},{"location":"team-culture/code-of-conduct/#respect-and-inclusion","title":"\ud83e\udd1d Respect and Inclusion","text":"<ul> <li>Embrace diverse perspectives, experiences, and cultural backgrounds.</li> <li>Practice active listening and seek to understand before responding.</li> <li>Avoid assumptions; engage with humility and curiosity.</li> </ul>"},{"location":"team-culture/code-of-conduct/#growth-and-learning","title":"\ud83c\udf31 Growth and Learning","text":"<ul> <li>Provide and welcome constructive feedback generously and gracefully.</li> <li>Celebrate progress \u2014 both individual and team \u2014 no matter how small.</li> <li>Be open to evolving your views through dialogue, mentorship, and learning.</li> </ul>"},{"location":"team-culture/code-of-conduct/#integrity-and-responsibility","title":"\ud83d\udd0d Integrity and Responsibility","text":"<ul> <li>Do what\u2019s right, not what\u2019s easy \u2014 even when no one is watching.</li> <li>Own your outcomes. Admit mistakes and treat them as growth moments.</li> <li>Respect the confidentiality of sensitive information and decisions.</li> </ul>"},{"location":"team-culture/code-of-conduct/#collaboration-and-innovation","title":"\ud83e\udde0 Collaboration and Innovation","text":"<ul> <li>Be a multiplier: lift others up, share knowledge, and help ideas flourish.</li> <li>Collaborate with purpose \u2014 align on goals, communicate clearly, and deliver with intent.</li> <li>Take initiative, challenge assumptions, and experiment with courage.</li> </ul>"},{"location":"team-culture/code-of-conduct/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<p>The following behaviors are strictly prohibited and will not be tolerated:</p> <ul> <li>Harassment, discrimination, or microaggressions based on race, gender, sexual orientation, disability, or any protected characteristic.</li> <li>Bullying, intimidation, or intentional disruption of professional environments.</li> <li>Spreading misinformation or engaging in deceitful practices.</li> <li>Repeated disrespect of personal boundaries or professional expectations.</li> </ul>"},{"location":"team-culture/code-of-conduct/#reporting-violations","title":"Reporting Violations","text":"<p>If you witness or experience any behavior that contradicts this Code, we encourage you to speak up. You can report concerns to:</p> <ul> <li>Your direct manager or mentor</li> <li>The People Operations team at <code>people@dexaminds.com</code></li> <li>Or use our confidential reporting channel: <code>ethics@dexaminds.com</code></li> </ul> <p>Reports are treated with strict confidentiality. We are committed to fair investigation and protection from retaliation.</p>"},{"location":"team-culture/code-of-conduct/#our-pledge-to-evolve","title":"Our Pledge to Evolve","text":"<p>Culture is a living system. As DexaMinds grows, so will our standards and practices. We actively revisit and refine our Code of Conduct to reflect our mission:</p> <p>\u201cTo empower visionary minds and distributed teams to create lasting technological impact by harmonizing intelligence, empathy, and execution.\u201d</p> <p>Let this Code serve as both a compass and a commitment \u2014 to lead with purpose, create with passion, and build with people at the center.</p>"},{"location":"team-culture/communication/","title":"Communication","text":"<p>At DexaMinds, communication is a strategic advantage. It\u2019s how we connect across boundaries, resolve complexity, and align toward impactful outcomes. In our hybrid and distributed environment, great communication is not accidental \u2014 it is intentional, inclusive, and infused with clarity and care.</p> <p>Whether we are brainstorming on a whiteboard, collaborating asynchronously across time zones, or writing documentation, we communicate to build trust, reduce friction, and enable velocity.</p>"},{"location":"team-culture/communication/#principles","title":"\ud83c\udfaf Principles","text":"<p>Our communication is shaped by the following guiding principles:</p>"},{"location":"team-culture/communication/#clarity-over-complexity","title":"\ud83d\udca1 Clarity Over Complexity","text":"<ul> <li>Communicate simply and purposefully.</li> <li>Eliminate ambiguity. Choose words that inform, not confuse.</li> </ul>"},{"location":"team-culture/communication/#transparency-is-default","title":"\ud83c\udf0d Transparency is Default","text":"<ul> <li>Share context openly unless confidentiality requires otherwise.</li> <li>Document decisions and learnings for collective benefit.</li> </ul>"},{"location":"team-culture/communication/#empathy-in-every-exchange","title":"\ud83e\udde0 Empathy in Every Exchange","text":"<ul> <li>Seek to understand before responding.</li> <li>Respect different styles, cultures, and bandwidths.</li> </ul>"},{"location":"team-culture/communication/#asynchronous-first","title":"\ud83d\udd53 Asynchronous First","text":"<ul> <li>Protect deep work time by reducing meetings where possible.</li> <li>Use async updates, threads, and comments to keep progress visible.</li> </ul>"},{"location":"team-culture/communication/#feedback-is-fuel","title":"\ud83d\udd01 Feedback is Fuel","text":"<ul> <li>Share constructive feedback regularly and respectfully.</li> <li>Create safe spaces for dialogue, disagreement, and growth.</li> </ul>"},{"location":"team-culture/communication/#tools-we-use","title":"\ud83d\udee0 Tools We Use","text":"<p>DexaMinds leverages a combination of synchronous and asynchronous tools \u2014 including Microsoft and modern collaboration platforms \u2014 to enable effective, flexible communication across teams and geographies.</p> Tool Purpose Microsoft Teams Real-time chat, group discussions, voice/video meetings, and team channels. Used for cross-functional collaboration and daily syncs. Microsoft 365 (Outlook, Word, Excel, OneNote, etc.) Formal emails, shared documents, collaborative planning sheets, and meeting notes. GitHub Code-centric discussions, pull request comments, issues, and changelogs. <p>\u26a1 Note: Use the right tool for the right message. Don\u2019t escalate to meetings when a well-written message will do. Don\u2019t bury critical decisions in chat threads \u2014 document them clearly.</p>"},{"location":"team-culture/communication/#best-practices","title":"\ud83d\udccb Best Practices","text":""},{"location":"team-culture/communication/#for-written-communication","title":"For Written Communication","text":"<ul> <li>Use clear subject lines, structure with headers and bullets.</li> <li>Set expectations: include action items, deadlines, and ownership.</li> <li>Be inclusive: avoid inside jokes or region-specific slang.</li> <li>Use emojis for tone, but sparingly in formal communications.</li> </ul>"},{"location":"team-culture/communication/#for-meetings-teams-github-office-365","title":"For Meetings (Teams, GitHub, Office 365)","text":"<ul> <li>Share an agenda in the invite or shared OneNote/Notion.</li> <li>Designate a facilitator and a note-taker.</li> <li>Capture and circulate key takeaways and next steps.</li> <li>Keep meetings purposeful \u2014 start and end on time.</li> </ul>"},{"location":"team-culture/communication/#for-emails-outlook","title":"For Emails (Outlook)","text":"<ul> <li>Start with a brief summary or objective.</li> <li>Use formatting (bold, italics, bullets) to improve scan-ability.</li> <li>Cc relevant stakeholders, but avoid overloading threads.</li> <li>Keep follow-up loops tight and actionable.</li> </ul>"},{"location":"team-culture/communication/#global-remote-communication","title":"\ud83c\udf10 Global &amp; Remote Communication","text":"<p>In a distributed environment, respect time zones and team schedules:</p> <ul> <li>Use Microsoft Teams\u2019 status indicators (e.g., \u201cDo Not Disturb\u201d) mindfully.</li> <li>Favor async updates (e.g., Teams channels, email summaries).</li> <li>Don\u2019t expect immediate replies unless marked urgent and agreed upon.</li> </ul> <p>We encourage using \"core collaboration hours\" for meetings and shared work, and respecting focus blocks to protect deep thinking.</p>"},{"location":"team-culture/communication/#communication-culture-at-dexaminds","title":"\ud83d\udcac Communication Culture at DexaMinds","text":"<p>At DexaMinds, communication is not just about transmitting information \u2014 it's about building relationships, aligning purpose, and creating momentum.</p> <p>We communicate:</p> <ul> <li>To build context, not control.</li> <li>To empower, not overwhelm.</li> <li>To learn and lead, not just report.</li> </ul> <p>\u201cEvery message, every meeting, every comment is an opportunity to build clarity, culture, and community.\u201d</p> <p>Let\u2019s make each one count.</p>"}]}